{% if ram.base is undefined or ram.size is undefined %}
  {{ missingvalue("Unable to find RAM to provide OpenOCD a work area") }}
{% endif %}
# JTAG adapter setup
interface       jlink
adapter_khz     {{ adapter_khz }}
transport       select jtag

set chain_length 5

set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu -irlen $chain_length

{% if num_harts == 1 %}
set _TARGETNAME_0 $_CHIPNAME.cpu

target create $_TARGETNAME_0 riscv -chain-position $_TARGETNAME_0
{% else %}
  {% for hart in range(num_harts) %}
set _TARGETNAME_{{ hart }} $_CHIPNAME.cpu{{ hart }}
  {% endfor %}

  {% for hart in range(num_harts) %}
    {% if hart == 0 %}
target create $_TARGETNAME_{{ hart }} riscv -chain-position $_CHIPNAME.cpu -rtos hwthread
    {% else %}
target create $_TARGETNAME_{{ hart }} riscv -chain-position $_CHIPNAME.cpu -coreid {{ hart }}
    {% endif %}
  {% endfor %}
target smp{% for hart in range(num_harts) %} $_TARGETNAME_{{ hart }}{% endfor %}

{% endif %}

$_TARGETNAME_0 configure -work-area-phys {{ ram.base|format_hex }} -work-area-size {{ ram.size|format_hex }} -work-area-backup 1

if { $chain_length == 6 } {
  riscv use_bscan_tunnel 5
}

riscv set_enable_virt2phys off
riscv set_enable_virtual   off

{% if flash.mem_base is defined and flash.control_base is defined %}
flash bank spi0 fespi {{ flash.mem_base|format_hex }} 0 0 0 $_TARGETNAME_0 {{ flash.control_base|format_hex }}
{% endif %}

init

jlink jtag 3

if { [info exists authkey] } {
  riscv authdata_write $authkey
}

halt

{% if flash %}
flash protect 0 1 last off
{% endif %}

echo "Ready for Remote Connections"
